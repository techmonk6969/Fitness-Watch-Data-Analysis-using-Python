# -*- coding: utf-8 -*-
"""Fitness Watch Data Analysis using Python

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1taBc45nd8YyKwKcHdbITxduCIYhoJGxm
"""

import pandas as pd
import plotly.io as pio
import plotly.graph_objects as go
import plotly.express as px
pio.templates.default = 'plotly_white'

data = pd.read_csv('/content/Apple-Fitness-Data.csv')
data.head()

print(data.isnull().sum())

fig1 = px.line(data, x='Time',
               y='Step Count',
               title='Step Count Over Time')
fig1.show()

fig2 = px.line(data, x='Time',
               y='Distance',
               title='Distance Over Time')
fig2.show()

fig3 = px.line(data, x='Time',
               y='Energy Burned', # Removed leading space from column name
               title='Energy Burned Over Time')
fig3.show()

fig4 = px.line(data, x='Time',
               y='Walking Speed',
               title='Walking Speed Over Time')
fig4.show()

average_step_count_per_day = data.groupby('Date')['Step Count'].mean().reset_index()

fig5 = px.bar(average_step_count_per_day,
              x='Date',
              y='Step Count',
              title='Average Step Count per Day')
fig5.update_xaxes(type='category')
fig5.show()

data['Walking Efficiency'] = data['Distance'] / data['Step Count']

fig6 = px.line(data, x='Time',
               y='Walking Efficiency',
               title='Walking Efficiency Over Time')
fig6.show()

time_intervals = pd.cut(pd.to_datetime(data['Time']).dt.hour,
                        bins=[0, 6, 12, 18, 24],
                        labels=['Night', 'Morning', 'Afternoon', 'Evening'],
                        right=False)
data['Time Interval'] = time_intervals

fig7 = px.scatter(data, x='Step Count',
               y='Walking Speed',
               color='Time Interval',
               title='Step Count Over Time by Time Interval',
               trendline='ols')
fig7.show()

# Convert 'Time' to datetime objects and extract relevant features for averaging.
data['Time'] = pd.to_datetime(data['Time'])
data['Hour'] = data['Time'].dt.hour
data['Minute'] = data['Time'].dt.minute
data['Second'] = data['Time'].dt.second

# Calculate daily averages, EXCLUDING the categorical 'Time Interval' column
daily_avg_metrics = data.drop('Time Interval', axis=1).groupby('Date').mean().reset_index()

# Drop the original 'Time' column as it's no longer needed
daily_avg_metrics = daily_avg_metrics.drop('Time', axis=1)

daily_avg_metrics_melted = daily_avg_metrics.melt(id_vars=['Date'],
                                                  value_vars=['Step Count','Distance',
                                                              'Energy Burned', 'Flights Climbed',
                                                               'Walking Double Support Percentage',
                                                                'Walking Speed', 'Hour', 'Minute', 'Second']) # Include new time features

!pip install plotly.express
import plotly.express as px
fig = px.treemap(daily_avg_metrics_melted,
                 path=["variable"],
                 values="value",
                 color="variable",
                 hover_data=["value"],
                 title="Daily Averages for Different Metrics")
fig.show()

# Select metrics excluding Step Count
metrics_to_visualize = ["Distance", "Energy Burned", "Flights Climbed",
                        "Walking Double Support Percentage", "Walking Speed"]

# Reshape data for treemap
daily_avg_metrics_melted = daily_avg_metrics.melt(id_vars=["Date"], value_vars=metrics_to_visualize)

fig = px.treemap(daily_avg_metrics_melted,
                 path=["variable"],
                 values="value",
                 color="variable",
                 hover_data=["value"],
                 title="Daily Averages for Different Metrics (Excluding Step Count)")
fig.show()

